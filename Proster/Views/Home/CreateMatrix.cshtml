@model Proster.Models.RCA
@{ ViewBag.Title = "CreateMatrix";
}
<script src="../../Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.validate.min.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>
<script type="text/jscript">
    //Custom jQuery validation unobtrusive script and adapters
    jQuery.validator.unobtrusive.adapters.add("dropdown", function (options) {
        if (options.element.tagName.toUpperCase() == "SELECT" && options.element.type.toUpperCase() == "SELECT-ONE") {
            options.rules["required"] = true;
            if (options.message) {
                options.messages["required"] = options.message;
            }
        }
    });

    $(function () {
        //get component list on changing of product dropdown list
        $('#product_ID').change(function () {
            var id = $("#product_ID :selected").val();
            if (id != "") {
                $.ajax({
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("ComponentList", "Home")',
 data: { "mProduct": id },
 dataType: "json",
 beforeSend: function () {
 //alert(id);
},
 success: function (data) {
 var items = "";
    $.each(data, function (i, component) {
        items += "<option value='" + component.Value + "'>" + component.Text + "</option>";
 });
 // Fill Component Dropdown list
$('#component_ID').html(items);
 },
 error: function (result) {
 alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
 }
 });
 }
 else {
 var items = '<option value="">Select</option>';
 $('#component_ID').html(items);
 }
 });
    });

    $(function ()
{
 //get component list on changing of product dropdown list
$('#component_ID').change(function () {
 var id = $("#component_ID :selected").val();
 if (id != "") {
 $.ajax({
 type: "GET",
 contentType: "application/json; charset=utf-8",
 url: '@Url.Action("CauseList", "Home")',
 data: { "mComponent": id },
 dataType: "json",
 beforeSend: function () {
 //alert(id);
},
 success: function (data) {
 var items = "";
    $.each(data, function (i, cause) {
        items += "<option value='" + cause.Value + "'>" + cause.Text + "</option>";
 });
 // Fill Component Dropdown list
$('#cause_ID').html(items);
 },
 error: function (result) {
 alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
 }
 });
 }
 else {
 var items = '<option value="">Select</option>';
 $('#cause_ID').html(items);
 }
 });
 });
</script>

<h2>Create RCA Matrix</h2>
@using (Html.BeginForm())
{
    <fieldset>
        <legend>Properties</legend>
        <ol>
            <li>
                <p>
                    @Html.LabelFor(m => m.product)
                    <br>
                    @Html.ListBoxFor(m => m.product.ID, new SelectList(ViewBag.Product, "ID", "Name", ViewBag.SelProduct), new { style = "width:310px" })
                    @Html.ValidationMessageFor(m => m.product.ID)
                </p>
            </li>
            <li>
                <p>
                    @Html.LabelFor(m => m.component)
                    <br>
                    @Html.ListBoxFor(m => m.component.ID, new SelectList(ViewBag.Component, "ID", "Name", ViewBag.SelComponent), new { style = "width:310px" })
                    @Html.ValidationMessageFor(m => m.component.ID)
                </p>
            </li>
            <li>
                <p>
                    @Html.LabelFor(m => m.cause)
                    <br>
                    @Html.ListBoxFor(m => m.cause.ID, new SelectList(ViewBag.Cause, "ID", "Name", ViewBag.SelCause), new { style = "width:310px" })
                    @Html.ValidationMessageFor(m => m.cause.ID)
                </p>
            </li>

        </ol>
        <input type="submit" value="Submit" />
    </fieldset>
}


